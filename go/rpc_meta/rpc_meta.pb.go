// Code generated by protoc-gen-go.
// source: sofa/pbrpc/rpc_meta.proto
// DO NOT EDIT!

/*
Package meta is a generated protocol buffer package.

It is generated from these files:
	sofa/pbrpc/rpc_meta.proto
	sofa/pbrpc/rpc_option.proto

It has these top-level messages:
	RpcMeta
*/
package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message type.
type RpcMeta_Type int32

const (
	RpcMeta_REQUEST  RpcMeta_Type = 0
	RpcMeta_RESPONSE RpcMeta_Type = 1
)

var RpcMeta_Type_name = map[int32]string{
	0: "REQUEST",
	1: "RESPONSE",
}
var RpcMeta_Type_value = map[string]int32{
	"REQUEST":  0,
	"RESPONSE": 1,
}

func (x RpcMeta_Type) Enum() *RpcMeta_Type {
	p := new(RpcMeta_Type)
	*p = x
	return p
}
func (x RpcMeta_Type) String() string {
	return proto.EnumName(RpcMeta_Type_name, int32(x))
}
func (x *RpcMeta_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcMeta_Type_value, data, "RpcMeta_Type")
	if err != nil {
		return err
	}
	*x = RpcMeta_Type(value)
	return nil
}
func (RpcMeta_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type RpcMeta struct {
	Type *RpcMeta_Type `protobuf:"varint,1,req,name=type,enum=sofa.pbrpc.RpcMeta_Type" json:"type,omitempty"`
	// Message sequence id.
	SequenceId *uint64 `protobuf:"varint,2,req,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	// Method full name.
	// For example: "test.HelloService.GreetMethod"
	Method *string `protobuf:"bytes,100,opt,name=method" json:"method,omitempty"`
	// Server timeout in milli-seconds.
	ServerTimeout *int64 `protobuf:"varint,101,opt,name=server_timeout,json=serverTimeout" json:"server_timeout,omitempty"`
	// Set as true if the call is failed.
	Failed *bool `protobuf:"varint,200,opt,name=failed" json:"failed,omitempty"`
	// The error code if the call is failed.
	ErrorCode *int32 `protobuf:"varint,201,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// The error reason if the call is failed.
	Reason *string `protobuf:"bytes,202,opt,name=reason" json:"reason,omitempty"`
	// Set the request/response compress type.
	CompressType *CompressType `protobuf:"varint,300,opt,name=compress_type,json=compressType,enum=sofa.pbrpc.CompressType" json:"compress_type,omitempty"`
	// Set the response compress type of user expected.
	ExpectedResponseCompressType *CompressType `protobuf:"varint,301,opt,name=expected_response_compress_type,json=expectedResponseCompressType,enum=sofa.pbrpc.CompressType" json:"expected_response_compress_type,omitempty"`
	XXX_unrecognized             []byte        `json:"-"`
}

func (m *RpcMeta) Reset()                    { *m = RpcMeta{} }
func (m *RpcMeta) String() string            { return proto.CompactTextString(m) }
func (*RpcMeta) ProtoMessage()               {}
func (*RpcMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RpcMeta) GetType() RpcMeta_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RpcMeta_REQUEST
}

func (m *RpcMeta) GetSequenceId() uint64 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *RpcMeta) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func (m *RpcMeta) GetServerTimeout() int64 {
	if m != nil && m.ServerTimeout != nil {
		return *m.ServerTimeout
	}
	return 0
}

func (m *RpcMeta) GetFailed() bool {
	if m != nil && m.Failed != nil {
		return *m.Failed
	}
	return false
}

func (m *RpcMeta) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *RpcMeta) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *RpcMeta) GetCompressType() CompressType {
	if m != nil && m.CompressType != nil {
		return *m.CompressType
	}
	return CompressType_CompressTypeNone
}

func (m *RpcMeta) GetExpectedResponseCompressType() CompressType {
	if m != nil && m.ExpectedResponseCompressType != nil {
		return *m.ExpectedResponseCompressType
	}
	return CompressType_CompressTypeNone
}

func init() {
	proto.RegisterType((*RpcMeta)(nil), "sofa.pbrpc.RpcMeta")
	proto.RegisterEnum("sofa.pbrpc.RpcMeta_Type", RpcMeta_Type_name, RpcMeta_Type_value)
}

func init() { proto.RegisterFile("sofa/pbrpc/rpc_meta.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0xc9, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xaf, 0xd3, 0xde, 0x0e, 0xa7, 0x83, 0x2a, 0x2f, 0xee, 0x35, 0x83, 0x68, 0xa8, 0x84,
	0x94, 0x05, 0x4a, 0x25, 0x1e, 0x80, 0x4d, 0x95, 0x05, 0x0b, 0x26, 0xb7, 0xac, 0x43, 0xb0, 0x4f,
	0x45, 0x24, 0x12, 0x1b, 0xdb, 0x45, 0xf4, 0x9d, 0x80, 0xe7, 0x00, 0x9e, 0x0a, 0x35, 0x49, 0x45,
	0xe9, 0x86, 0xe5, 0x3f, 0x9c, 0xef, 0xe8, 0x87, 0x1d, 0xab, 0xe6, 0xc9, 0x58, 0xdf, 0x19, 0x2d,
	0xc6, 0x46, 0x8b, 0x38, 0x43, 0x97, 0x84, 0xda, 0x28, 0xa7, 0x28, 0xac, 0xa2, 0xb0, 0x88, 0x76,
	0xf7, 0xb6, 0x6a, 0x4a, 0xbb, 0x54, 0xe5, 0x65, 0x71, 0xf4, 0x56, 0x83, 0x26, 0xd7, 0xe2, 0x1c,
	0x5d, 0x42, 0x8f, 0xa1, 0xee, 0x96, 0x1a, 0x19, 0xf1, 0xbd, 0xa0, 0x7f, 0xc2, 0xc2, 0x6f, 0x46,
	0x58, 0x55, 0xc2, 0xd9, 0x52, 0x23, 0x2f, 0x5a, 0x74, 0x08, 0x1d, 0x8b, 0x8f, 0x0b, 0xcc, 0x05,
	0xc6, 0xa9, 0x64, 0x9e, 0xef, 0x05, 0x75, 0x0e, 0x6b, 0xeb, 0x4c, 0xd2, 0x7f, 0xd0, 0xc8, 0xd0,
	0xdd, 0x2b, 0xc9, 0xa4, 0x4f, 0x82, 0x36, 0xaf, 0x14, 0x3d, 0x82, 0xbe, 0x45, 0xf3, 0x84, 0x26,
	0x76, 0x69, 0x86, 0x6a, 0xe1, 0x18, 0xfa, 0x24, 0xa8, 0xf1, 0x5e, 0xe9, 0xce, 0x4a, 0x93, 0xfe,
	0x87, 0xc6, 0x3c, 0x49, 0x1f, 0x50, 0xb2, 0x77, 0xe2, 0x93, 0xa0, 0xc5, 0x2b, 0x49, 0x0f, 0x00,
	0xd0, 0x18, 0x65, 0x62, 0xa1, 0x24, 0xb2, 0x8f, 0x55, 0xf8, 0x97, 0xb7, 0x0b, 0x6b, 0xa2, 0x24,
	0xae, 0x0e, 0x0d, 0x26, 0x56, 0xe5, 0xec, 0x93, 0x94, 0x8f, 0x4b, 0x49, 0x4f, 0xa1, 0x27, 0x54,
	0xa6, 0x0d, 0x5a, 0x1b, 0x17, 0x43, 0x5f, 0x3c, 0x9f, 0x6c, 0x2f, 0x9d, 0x54, 0x8d, 0x62, 0x69,
	0x57, 0x6c, 0x28, 0x7a, 0x0b, 0x43, 0x7c, 0xd6, 0x28, 0x1c, 0xca, 0xd8, 0xa0, 0xd5, 0x2a, 0xb7,
	0x18, 0xff, 0x24, 0xbe, 0xfe, 0x46, 0xdc, 0x5f, 0x13, 0x78, 0x05, 0xd8, 0x4c, 0x47, 0x87, 0x50,
	0x2f, 0x3e, 0x75, 0xa0, 0xc9, 0xa3, 0xeb, 0x9b, 0x68, 0x3a, 0x1b, 0xfc, 0xa1, 0x5d, 0x68, 0xf1,
	0x68, 0x7a, 0x75, 0x79, 0x31, 0x8d, 0x06, 0xe4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x40, 0x24, 0xc6,
	0x7c, 0xf5, 0x01, 0x00, 0x00,
}
